C51 COMPILER V9.54   EEPROM                                                                08/17/2018 17:16:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Output\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE std_Lib\EEPROM.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Usr;.\Usr_
                    -lib;.\Sensor;.\Actuator;.\data_Trans;.\std_Lib) DEBUG PRINT(.\Listing\EEPROM.lst) OBJECT(.\Output\EEPROM.obj)

line level    source

   1          
   2          //      本程序是STC系列的内置EEPROM读写程序。
   3          
   4          #include "config.h"
   5          #include "eeprom.h"
   6          #include "datasReference.h"
   7          #include "string.h"
   8          
   9          //========================================================================
  10          // 函数: void   ISP_Disable(void)
  11          // 描述: 禁止访问ISP/IAP.
  12          // 参数: non.
  13          // 返回: non.
  14          // 版本: V1.0, 2012-10-22
  15          //========================================================================
  16          void DisableEEPROM(void)
  17          {
  18   1              ISP_CONTR = 0;                  //禁止ISP/IAP操作
  19   1              ISP_CMD   = 0;                  //去除ISP/IAP命令
  20   1              ISP_TRIG  = 0;                  //防止ISP/IAP命令误触发
  21   1              ISP_ADDRH = 0xff;               //清0地址高字节
  22   1              ISP_ADDRL = 0xff;               //清0地址低字节，指向非EEPROM区，防止误操作
  23   1      }
  24          
  25          //========================================================================
  26          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  27          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  28          // 参数: EE_address:  读出EEPROM的首地址.
  29          //       DataAddress: 读出数据放缓冲的首地址.
  30          //       number:      读出的字节长度.
  31          // 返回: non.
  32          // 版本: V1.0, 2012-10-22
  33          //========================================================================
  34          
  35          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  36          {
  37   1              EA = 0;         //禁止中断
  38   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  39   1              ISP_READ();                                                                     //送字节读命令，命令不需改变时，不需重新送命令
  40   1              do
  41   1              {
  42   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  43   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  44   2                      ISP_TRIG();                                                     //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  45   2                                                                                              //送完A5H后，ISP/IAP命令立即被触发启动
  46   2                                                                                              //CPU等待IAP完成后，才会继续执行程序。
  47   2                      _nop_();
  48   2                      *DataAddress = ISP_DATA;                        //读出的数据送往
  49   2                      EE_address++;
  50   2                      DataAddress++;
  51   2              }while(--number);
  52   1      
  53   1              DisableEEPROM();
  54   1              EA = 1;         //重新允许中断
C51 COMPILER V9.54   EEPROM                                                                08/17/2018 17:16:38 PAGE 2   

  55   1      }
  56          
  57          
  58          /******************** 扇区擦除函数 *****************/
  59          //========================================================================
  60          // 函数: void EEPROM_SectorErase(u16 EE_address)
  61          // 描述: 把指定地址的EEPROM扇区擦除.
  62          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  63          // 返回: non.
  64          // 版本: V1.0, 2013-5-10
  65          //========================================================================
  66          void EEPROM_SectorErase(u16 EE_address)
  67          {
  68   1              EA = 0;         //禁止中断
  69   1                                                                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
  70   1                                                                                              //扇区中任意一个字节地址都是扇区地址。
  71   1              ISP_ADDRH = EE_address / 256;                   //送扇区地址高字节（地址需要改变时才需重新送地址）
  72   1              ISP_ADDRL = EE_address % 256;                   //送扇区地址低字节
  73   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  74   1              ISP_ERASE();                                                    //送扇区擦除命令，命令不需改变时，不需重新送命令
  75   1              ISP_TRIG();
  76   1              _nop_();
  77   1              DisableEEPROM();
  78   1              EA = 1;         //重新允许中断
  79   1      }
  80          
  81          //========================================================================
  82          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  83          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  84          // 参数: EE_address:  写入EEPROM的首地址.
  85          //       DataAddress: 写入源数据的缓冲的首地址.
  86          //       number:      写入的字节长度.
  87          // 返回: non.
  88          // 版本: V1.0, 2012-10-22
  89          //========================================================================
  90          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  91          {
  92   1              EA = 0;         //禁止中断
  93   1      
  94   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  95   1              ISP_WRITE();                                                    //送字节写命令，命令不需改变时，不需重新送命令
  96   1              do
  97   1              {
  98   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  99   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
 100   2                      ISP_DATA  = *DataAddress;                       //送数据到ISP_DATA，只有数据改变时才需重新送
 101   2                      ISP_TRIG();
 102   2                      _nop_();
 103   2                      EE_address++;
 104   2                      DataAddress++;
 105   2              }while(--number);
 106   1      
 107   1              DisableEEPROM();
 108   1              EA = 1;         //重新允许中断
 109   1      }
 110          
 111          
 112          //========================================================================
 113          // 函数: void coverEEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
 114          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM-----数据覆盖形式写入！！！！！！！！！
 115          // 参数: EE_address:  写入EEPROM的首地址.
 116          //       DataAddress: 写入源数据的缓冲的首地址.
C51 COMPILER V9.54   EEPROM                                                                08/17/2018 17:16:38 PAGE 3   

 117          //       number:      写入的字节长度.
 118          // 返回: non.
 119          // 版本: V1.0, 2012-10-22
 120          //========================================================================
 121          void coverEEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number){    //仅限第一扇区写入操作！！！ 一个扇区
             -就够用了
 122   1              
 123   1              u8  xdata datsTemp[EEPROM_USE_OF_NUMBER] = {0};
 124   1              
 125   1              EEPROM_read_n(EEPROM_ADDR_START, &datsTemp[0], EEPROM_USE_OF_NUMBER);   //缓存暂存
 126   1              EEPROM_SectorErase(EEPROM_ADDR_START);  //擦扇区
 127   1              
 128   1              memcpy(&datsTemp[EE_address], DataAddress, number);     //数据覆盖
 129   1              
 130   1              EEPROM_write_n(EEPROM_ADDR_START, &datsTemp[0], EEPROM_USE_OF_NUMBER);  //数据重新存入
 131   1      }
 132          
 133          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    291    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----     533
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
