C51 COMPILER V9.54   USART                                                                 08/17/2018 17:16:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Output\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE std_Lib\USART.C LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Usr;.\Usr_l
                    -ib;.\Sensor;.\Actuator;.\data_Trans;.\std_Lib) DEBUG PRINT(.\Listing\USART.lst) OBJECT(.\Output\USART.obj)

line level    source

   1          #include "sensor_FP.h"
   2          
   3          #include "USART.h"
   4          #include "string.h"
   5          #include "soft_uart.h"
   6          #include "delay.h"
   7          
   8          //*********************指纹模块相关变量引用区********************/
   9          extern stt_stepDtt      um_dttStep;                             //指纹模块工作模式为：主动检测 模板时，_进程指示
  10          extern bit                      FP_Rcv_timeOut_FLG;             //指纹模块数据接收超时标志      
  11          
  12          /**********************本地文件变量创建区********************/
  13          COMx_Define     COM1,COM2;
  14          u8      xdata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
  15          u8      xdata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
  16          u8      xdata TX2_Buffer[COM_TX2_Lenth];        //发送缓冲
  17          u8      xdata RX2_Buffer[COM_RX2_Lenth];        //接收缓冲
  18          
  19          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  20          {
  21   1              u8      i;
  22   1              u32     j;
  23   1              
  24   1              if(UARTx == USART1)
  25   1              {
  26   2                      COM1.id = 1;
  27   2                      COM1.TX_read    = 0;
  28   2                      COM1.TX_write   = 0;
  29   2                      COM1.B_TX_busy  = 0;
  30   2                      COM1.RX_Cnt     = 0;
  31   2                      COM1.RX_TimeOut = 0;
  32   2                      COM1.B_RX_OK    = 0;
  33   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  34   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  35   2      
  36   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 2;       //模式错误
  37   2                      if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  38   2                      else                                                                    PS = 0; //低优先级中断
  39   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  40   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  41   2                      {
  42   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  43   3                              if(j >= 65536UL)        return 2;       //错误
  44   3                              j = 65536UL - j;
  45   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
  46   3                              {
  47   4                                      TR1 = 0;
  48   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  49   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  50   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  51   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  52   4                                      TH1 = (u8)(j>>8);
  53   4                                      TL1 = (u8)j;
  54   4                                      ET1 = 0;        //禁止中断
C51 COMPILER V9.54   USART                                                                 08/17/2018 17:16:38 PAGE 2   

  55   4                                      TMOD &= ~0x40;  //定时
  56   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  57   4                                      TR1  = 1;
  58   4                              }
  59   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  60   3                              {
  61   4                                      AUXR &= ~(1<<4);        //Timer stop
  62   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  63   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
  64   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
  65   4                                      TH2 = (u8)(j>>8);
  66   4                                      TL2 = (u8)j;
  67   4                                      IE2  &= ~(1<<2);        //禁止中断
  68   4                                      AUXR &= ~(1<<3);        //定时
  69   4                                      AUXR |=  (1<<4);        //Timer run enable
  70   4                              }
  71   3                              else return 2;  //错误
  72   3                      }
  73   2                      else if(COMx->UART_Mode == UART_ShiftRight)
  74   2                      {
  75   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  76   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  77   3                      }
  78   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  79   2                      {
  80   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  81   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  82   3                      }
  83   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  84   2                      else                                                            ES = 0; //禁止中断
  85   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  86   2                      else                                                            REN = 0;        //禁止接收
  87   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  88   2                      if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  89   2                      else                                                                    PCON2 &= ~(1<<4);
  90   2                      return  0;
  91   2              }
  92   1      
  93   1              if(UARTx == USART2)
  94   1              {
  95   2                      COM2.id = 2;
  96   2                      COM2.TX_read    = 0;
  97   2                      COM2.TX_write   = 0;
  98   2                      COM2.B_TX_busy  = 0;
  99   2                      COM2.RX_Cnt     = 0;
 100   2                      COM2.RX_TimeOut = 0;
 101   2                      COM2.B_RX_OK    = 0;
 102   2                      for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 103   2                      for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 104   2      
 105   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
 106   2                      {
 107   3                              if(COMx->UART_Polity == PolityHigh)             IP2 |=  1;      //高优先级中断
 108   3                              else                                                                    IP2 &= ~1;      //低优先级中断
 109   3                              if(COMx->UART_Mode == UART_9bit_BRTx)   S2CON |=  (1<<7);       //9bit
 110   3                              else                                                                    S2CON &= ~(1<<7);       //8bit
 111   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
 112   3                              if(j >= 65536UL)        return 2;       //错误
 113   3                              j = 65536UL - j;
 114   3                              AUXR &= ~(1<<4);        //Timer stop
 115   3                              AUXR &= ~(1<<3);        //Timer2 set As Timer
 116   3                              AUXR |=  (1<<2);        //Timer2 set as 1T mode
C51 COMPILER V9.54   USART                                                                 08/17/2018 17:16:38 PAGE 3   

 117   3                              TH2 = (u8)(j>>8);
 118   3                              TL2 = (u8)j;
 119   3                              IE2  &= ~(1<<2);        //禁止中断
 120   3                              AUXR |=  (1<<4);        //Timer run enable
 121   3                      }
 122   2                      else    return 2;       //模式错误
 123   2                      if(COMx->UART_Interrupt == ENABLE)      IE2   |=  1;            //允许中断
 124   2                      else                                                            IE2   &= ~1;            //禁止中断
 125   2                      if(COMx->UART_RxEnable == ENABLE)       S2CON |=  (1<<4);       //允许接收
 126   2                      else                                                            S2CON &= ~(1<<4);       //禁止接收
 127   2                      P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);        //切换IO
 128   2              }
 129   1              
 130   1              return 3;
 131   1      }
 132          
 133          
 134          /*************** 装载串口发送缓冲 *******************************/
 135          
 136          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
 137          {
 138   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
 139   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
 140   1      
 141   1              if(COM1.B_TX_busy == 0)         //空闲
 142   1              {  
 143   2                      COM1.B_TX_busy = 1;             //标志忙
 144   2                      TI = 1;                                 //触发发送中断
 145   2              }
 146   1      }
 147          
 148          void TX2_write2buff(u8 dat)     //写入发送缓冲，指针+1
 149          {
 150   1              TX2_Buffer[COM2.TX_write] = dat;        //装发送缓冲
 151   1              if(++COM2.TX_write >= COM_TX2_Lenth)    COM2.TX_write = 0;
 152   1      
 153   1              if(COM2.B_TX_busy == 0)         //空闲
 154   1              {  
 155   2                      COM2.B_TX_busy = 1;             //标志忙
 156   2                      SET_TI2();                              //触发发送中断
 157   2              }
 158   1      }
 159          
 160          void PrintString1(u8 *puts)
 161          {
 162   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 163   1      }
 164          
 165          void PrintString2(u8 *puts)
 166          {
 167   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);         //遇到停止符0结束
 168   1      }
 169          
 170          void uart1_datsSend(u8 *dats,u8 datsLen){
 171   1      
 172   1              u8 loop = 0;
 173   1              
 174   1              for(loop = 0; loop < datsLen; loop ++){
 175   2              
 176   2                      TX1_write2buff(*dats ++);
 177   2              }
 178   1      }
C51 COMPILER V9.54   USART                                                                 08/17/2018 17:16:38 PAGE 4   

 179          
 180          void uart2_datsSend(u8 *dats,u8 datsLen){
 181   1      
 182   1              u8 loop = 0;
 183   1              
 184   1              for(loop = 0; loop < datsLen; loop ++){
 185   2              
 186   2                      TX2_write2buff(*dats ++);
 187   2              }
 188   1      }
 189          
 190          u8 UART_FP_byteRcv(void)
 191          {
 192   1      #define S2RI  0x01
 193   1              
 194   1              u32 tOut_cnt = 400000;          //超时时间
 195   1              
 196   1              while(!RI2){
 197   2              
 198   2                      tOut_cnt --;
 199   2                      if(!tOut_cnt){  //超时检测
 200   3                      
 201   3                              LogString("指纹模块接收响应数据超时!!!\n");
 202   3                              FP_Rcv_timeOut_FLG = 1;
 203   3                              CLR_RI2();
 204   3                              return 0xff;
 205   3                      }
 206   2              }
 207   1              
 208   1              CLR_RI2();
 209   1              return S2BUF;
 210   1      }
 211          
 212          /*
 213          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 214          {
 215                  if(COMx->id == 1)       TX1_write2buff(dat);
 216                  if(COMx->id == 2)       TX2_write2buff(dat);
 217          }
 218          
 219          void PrintString(COMx_Define *COMx, u8 *puts)
 220          {
 221              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 222          }
 223          */
 224          
 225          
 226          ///********************* UART1中断函数************************/
 227          //void UART1_Rountine (void) interrupt UART1_VECTOR
 228          //{
 229          //      if(RI)
 230          //      {
 231          //              RI = 0;
 232          //              if(COM1.B_RX_OK == 0)
 233          //              {
 234          //                      if(COM1.RX_Cnt >= COM_RX1_Lenth)        COM1.RX_Cnt = 0;
 235          //                      RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 236          //                      COM1.RX_TimeOut = TimeOutSet1;
 237          //              }
 238          //      }
 239          
 240          //      if(TI)
C51 COMPILER V9.54   USART                                                                 08/17/2018 17:16:38 PAGE 5   

 241          //      {
 242          //              TI = 0;
 243          //              if(COM1.TX_read != COM1.TX_write)
 244          //              {
 245          //                      SBUF = TX1_Buffer[COM1.TX_read];
 246          //                      if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 247          //              }
 248          //              else    COM1.B_TX_busy = 0;
 249          //      }
 250          //}
 251          
 252          /********************* UART2中断函数************************/
 253          void UART2_Rountine (void) interrupt UART2_VECTOR
 254          {
 255   1      //      if(RI2)
 256   1      //      {
 257   1      //              CLR_RI2();
 258   1      //              if(COM2.B_RX_OK == 0)
 259   1      //              {
 260   1      //                      if(COM2.RX_Cnt >= COM_RX2_Lenth)        COM2.RX_Cnt = 0;
 261   1      //                      RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 262   1      //                      COM2.RX_TimeOut = TimeOutSet2;
 263   1      //              }
 264   1      //      }
 265   1              
 266   1      
 267   1              if(TI2)
 268   1              {
 269   2                      CLR_TI2();
 270   2                      if(COM2.TX_read != COM2.TX_write)
 271   2                      {
 272   3                              S2BUF = TX2_Buffer[COM2.TX_read];
 273   3                              if(++COM2.TX_read >= COM_TX2_Lenth)             COM2.TX_read = 0;
 274   3                      }
 275   2                      else    COM2.B_TX_busy = 0;
 276   2              }
 277   1      }
 278          
 279          
 280          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1238    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =    334      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
