C51 COMPILER V9.54   TIMERACT                                                              08/17/2018 17:16:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMERACT
OBJECT MODULE PLACED IN .\Output\timerAct.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Actuator\timerAct.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Usr;.\U
                    -sr_lib;.\Sensor;.\Actuator;.\data_Trans;.\std_Lib) DEBUG PRINT(.\Listing\timerAct.lst) OBJECT(.\Output\timerAct.obj)

line level    source

   1          #include "timerAct.h"
   2          
   3          #include "sensor_FP.h"
   4          #include "HYM8564.h"
   5          #include "datasReference.h"
   6          #include "Relay.h"
   7          
   8          #include "eeprom.h"
   9          #include "soft_uart.h"
  10          
  11          #include "stdio.h"
  12          #include "string.h"
  13          
  14          /****************±¾µØÎÄ¼þ±äÁ¿¶¨ÒåÇø*************************/
  15          switch_Status   swStatus_fromTim                                = swStatus_null;        //¶¨Ê±Æ÷¸üÐÂ¿ª¹ØÃüÁî±êÖ¾£¬¶¨Ê±Ê±¿Ìµ½´ïÊ±¿ª¹ØÏìÓ¦¶¯×÷×
             -´Ì¬
  16          
  17          u8                              swTim_onShoot_FLAG                              = 0;    //ÆÕÍ¨¿ª¹Ø¶¨Ê±Ò»´ÎÐÔ±êÖ¾¡ª¡ªµÍËÄÎ»±êÊ¶ËÄ¸ö¶¨Ê±Æ÷
  18                  
  19          u8                              permissionTim_oneShoot_FLAG     = 0;    //Ö¸ÎÆÈ¨ÏÞ¶¨Ê±Ò»´ÎÐÔ±êÖ¾¡ª¡ªµÍËÄÎ»±êÊ¶ËÄ¸ö¶¨Ê±Æ÷
  20          
  21          bit                             ifTim_sw_running_FLAG                   = 0;    //ÆÕÍ¨¿ª¹Ø¶¨Ê±ÔËÐÐ±êÖ¾Î»
  22          bit                             ifTim_permission_running_FLAG   = 0;    //Ö¸ÎÆÈ¨ÏÞ¶¨Ê±ÔËÐÐ±êÖ¾Î»
  23          
  24          //***************Ö¸ÎÆÄ£¿éÇý¶¯Ïß³ÌÏà¹Ø±äÁ¿ÒýÓÃÇø*************/
  25          
  26          extern bit              FP_umDetect_enFLAG;             //Ö¸ÎÆÄ£¿é¹¤×÷Ä£Ê½Îª£ºÖ÷¶¯¼ì²â Ä£°åÊ±£¬¹¤×÷Ê¹ÄÜ±êÖ¾£¬ÓÃÓÚÈ¨ÏÞ¶¨Ê±
  27          
  28          /*-----------------------------------------------------------------------------------------------*/
  29          void datsTiming_read_eeprom(timing_Dats timDats_tab[4], timingTabObj timCountObj){
  30   1      
  31   1              u8 dats_Temp[12];
  32   1              u8 loop;
  33   1              
  34   1              switch(timCountObj){
  35   2              
  36   2                      case timTabObj_swNormal:{
  37   3                      
  38   3                              EEPROM_read_n(EEPROM_ADDR_swTimeTab, dats_Temp, 12);
  39   3                      }break;
  40   2                      
  41   2                      case timTabObj_permission:{
  42   3                      
  43   3                              EEPROM_read_n(EEPROM_ADDR_permissionTimeTab, dats_Temp, 12);
  44   3                      }break;
  45   2                      
  46   2                      default:break;
  47   2              }
  48   1              
  49   1              for(loop = 0; loop < 4; loop ++){
  50   2              
  51   2                      timDats_tab[loop].Week_Num      = (dats_Temp[loop * 3 + 0] & 0x7f) >> 0;        /*ÖÜÕ¼Î»Êý¾Ý*///µÍÆßÎ»
  52   2                      timDats_tab[loop].if_Timing = (dats_Temp[loop * 3 + 0] & 0x80) >> 7;    /*ÊÇ·ñ¿ªÆô¶¨Ê±Æ÷Êý¾Ý*///¸ßÒ»Î»
  53   2                      timDats_tab[loop].Status_Act= (dats_Temp[loop * 3 + 1] & 0xe0) >> 5;    /*¶¨Ê±ÏìÓ¦×´Ì¬Êý¾Ý*///¸ßÈýÎ»
C51 COMPILER V9.54   TIMERACT                                                              08/17/2018 17:16:38 PAGE 2   

  54   2                      timDats_tab[loop].Hour          = (dats_Temp[loop * 3 + 1] & 0x1f) >> 0;        /*¶¨Ê±Ê±¿Ì_Ð¡Ê±*///µÍÎåÎ»
  55   2                      timDats_tab[loop].Minute        = (dats_Temp[loop * 3 + 2] & 0xff) >> 0;        /*¶¨Ê±Ê±¿Ì_·Ö*///È«°ËÎ»
  56   2              }
  57   1      }
  58          
  59          /*ÖÜÕ¼Î»ÅÐ¶Ï*///ÅÐ¶Ïµ±Ç°ÖÜÖµÊÇ·ñÔÚÕ¼Î»×Ö½ÚÖÐ
  60          bit weekend_judge(u8 weekNum, u8 HoldNum){
  61   1      
  62   1              u8 loop;
  63   1              
  64   1              weekNum --;
  65   1              for(loop = 0; loop < 7; loop ++){
  66   2              
  67   2                      if(HoldNum & (1 << loop)){
  68   3                              
  69   3                              if(loop == weekNum)return 1;
  70   3                      }
  71   2              }
  72   1              
  73   1              return 0;
  74   1      }
  75          
  76          void thread_Timing(void){
  77   1      
  78   1      #define TIME_LOGOUT_EN  0       //µ±Ç°Ê±¼älogÊ¹ÄÜ
  79   1              
  80   1              u8 loop = 0;
  81   1              
  82   1              stt_Time                        valTime_Local                                   = {0};  //µ±Ç°Ê±¼ä»º´æ
  83   1              
  84   1              timing_Dats             timDatsTemp_CalibrateTab[4]     = {0};  /*¶¨Ê±ÆðÊ¼Ê±¿Ì±í»º´æ*///ÆðÊ¼Ê±¿Ì¼°ÊôÐÔ
  85   1              u16                                     Minute_Temp                                             = 0;    //·Ö ¼ÆËã»º´æ
  86   1              
  87   1              u8                                      timDatsTemp_KeepTab[4]                  = {0};  //¶¨Ê±Ê±³¤±í»º´æ
  88   1      
  89   1      #if(TIME_LOGOUT_EN == 1)
                      code    u8                      time_Logout_Period                              = 5;    //Ê±¼älogÖÜÆÚ¡ª¡ªÃëÏµÊý±¶³Ë£¨¾Ý´óÑ­»·ÊÖ¶¯µ÷½Ú£©
                      static  u8                      time_Logout_Cnt                                 = 0;    //Ê±¼älogµÈ´ýÖÜÆÚ¼ÆÊ±
              #endif
  93   1              
  94   1              timeRead(&valTime_Local);       //µ±Ç°Ê±¼ä»ñÈ¡
  95   1      
  96   1      #if(TIME_LOGOUT_EN == 1)        
                      if(time_Logout_Cnt < time_Logout_Period)time_Logout_Cnt ++;
                      else{
                      
                              time_Logout_Cnt = 0;
                              time_Logout(valTime_Local);
                      }
              #endif
 104   1              
 105   1              /*ÆÕÍ¨¿ª¹Ø¶¨Ê±*///ËÄ¶ÎÊý¾Ý===============================================================================
             -========================<<<
 106   1              datsTiming_read_eeprom(timDatsTemp_CalibrateTab, timTabObj_swNormal);   /*ÆÕÍ¨¿ª¹Ø*///Ê±¿Ì±í¶ÁÈ¡
 107   1              
 108   1              /*ÅÐ¶ÏÊÇ·ñËùÓÐÆÕÍ¨¿ª¹Ø¶¨Ê±¶¼Îª¹Ø*/
 109   1              if((timDatsTemp_CalibrateTab[0].if_Timing == 0) &&      //È«¹Ø£¬ÖÃ±êÖ¾Î»
 110   1                 (timDatsTemp_CalibrateTab[1].if_Timing == 0) &&
 111   1                 (timDatsTemp_CalibrateTab[2].if_Timing == 0) &&
 112   1                 (timDatsTemp_CalibrateTab[3].if_Timing == 0)
 113   1                ){
 114   2                
C51 COMPILER V9.54   TIMERACT                                                              08/17/2018 17:16:38 PAGE 3   

 115   2                      ifTim_sw_running_FLAG = 0; 
 116   2                        
 117   2              }else{  //·ÇÈ«¹Ø£¬ÖÃ±êÖ¾Î»£¬²¢Ö´ÐÐ¶¨Ê±Âß¼­
 118   2                      
 119   2                      ifTim_sw_running_FLAG = 1; 
 120   2              
 121   2                      for(loop = 0; loop < 4; loop ++){
 122   3                              
 123   3                              if(weekend_judge(valTime_Local.time_Week, timDatsTemp_CalibrateTab[loop].Week_Num)){    //ÖÜÕ¼Î»±È¶Ô£¬³É¹¦
             -²Å½øÐÐÏÂÒ»²½
 124   4                              
 125   4                                      if(timCount_ENABLE == timDatsTemp_CalibrateTab[loop].if_Timing){        //ÊÇ·ñ¿ªÆô¶¨Ê±
 126   5                                              
 127   5                                              u8 log_dats[80] = {0};
 128   5                                              
 129   5                                              sprintf(log_dats, "ÓÐÐ§¶¨Ê±£º%dºÅ, ¶¨_Ê±:%d, ¶¨_·Ö:%d \n", (int)loop, 
 130   5                                                                                                                                                                 (int)timDatsTemp_CalibrateTab[loop].Hour, 
 131   5                                                                                                                                                                 (int)timDatsTemp_CalibrateTab[loop].Minute);
 132   5                                              /*logµ÷ÊÔ´òÓ¡*///ÆÕÍ¨¶¨Ê±¶¨Ê±ÐÅÏ¢
 133   5      //                                      LogDats(log_dats, strlen(log_dats));
 134   5                                      
 135   5                                              if((valTime_Local.time_Hour     == timDatsTemp_CalibrateTab[loop].Hour)&&       //Ê±¿Ì±È¶Ô
 136   5                                                 (valTime_Local.time_Minute   == timDatsTemp_CalibrateTab[loop].Minute)&&
 137   5                                                 (valTime_Local.time_Second   <= 2)){  //Ê±¿Ì±È¶ÔÊ±¼äÏÞÔÚÇ°2Ãë
 138   6                                                         
 139   6      //                                              LogString("time_UP!!!");
 140   6                                                      
 141   6                                                      //Ò»´ÎÐÔ¶¨Ê±ÅÐ¶Ï
 142   6                                                      if(swTim_onShoot_FLAG & (1 << loop)){   //ÊÇ·ñÎªÒ»´ÎÐÔ¶¨Ê±£¬ÊÇÔòÇå¿Õ±¾¶Î¶¨Ê±ÐÅÏ¢
 143   7                                                              
 144   7                                                              u8 code dats_Temp = 0;
 145   7                                                              
 146   7                                                              swTim_onShoot_FLAG &= ~(1 << loop);
 147   7                                                              coverEEPROM_write_n(EEPROM_ADDR_swTimeTab + loop * 3, &dats_Temp, 1); //¶¨Ê±ÐÅÏ¢Çå¿Õ
 148   7                                                      }
 149   6                                                 
 150   6                                                      //ÆÕÍ¨¿ª¹Ø¶¯×÷ÏìÓ¦
 151   6                                                      if(timDatsTemp_CalibrateTab[loop].Status_Act & 0x01){   /*¿ªÆô*/
 152   7                                                      
 153   7                                                              swStatus_fromTim = swStatus_on;
 154   7                                                              
 155   7                                                      }else{          /*¹Ø±Õ*/
 156   7                                                      
 157   7                                                              swStatus_fromTim = swStatus_off;
 158   7                                                      }
 159   6                                              }
 160   5                                      }
 161   4                              }
 162   3                      }
 163   2              }
 164   1      
 165   1              /*Ö¸ÎÆÈ¨ÏÞ¶¨Ê±*///ËÄ¶ÎÊý¾Ý===============================================================================
             -========================<<<
 166   1              datsTiming_read_eeprom(timDatsTemp_CalibrateTab, timTabObj_permission); /*Ö¸ÎÆÈ¨ÏÞ*///Ê±¿Ì±í¶ÁÈ¡
 167   1              EEPROM_read_n(EEPROM_ADDR_permissionKeepTab, timDatsTemp_KeepTab, 4);   /*Ö¸ÎÆÈ¨ÏÞ*///¶¨Ê±Ê±³¤±í¶ÁÈ¡
 168   1              
 169   1              /*ÅÐ¶ÏÊÇ·ñËùÓÐÖ¸ÎÆÈ¨ÏÞ¶¨Ê±¶¼Îª¹Ø*/
 170   1              if((timDatsTemp_CalibrateTab[0].if_Timing == 0) &&      //È«¹Ø£¬ÖÃ±êÖ¾Î»
 171   1                 (timDatsTemp_CalibrateTab[1].if_Timing == 0) &&
 172   1                 (timDatsTemp_CalibrateTab[2].if_Timing == 0) &&
 173   1                 (timDatsTemp_CalibrateTab[3].if_Timing == 0)
 174   1                ){
C51 COMPILER V9.54   TIMERACT                                                              08/17/2018 17:16:38 PAGE 4   

 175   2                
 176   2                      ifTim_permission_running_FLAG = 0; 
 177   2                        
 178   2              }else{  //·ÇÈ«¹Ø£¬ÖÃ±êÖ¾Î»£¬²¢Ö´ÐÐ¶¨Ê±Âß¼­
 179   2                      
 180   2                      u16 tt_minuteStamp                              = 0,
 181   2                              tt_minuteTemp_cmpA[4]           = {0},
 182   2                              tt_minuteTemp_cmpB[4]           = {0};
 183   2                      
 184   2                      ifTim_permission_running_FLAG   = 1; 
 185   2                      
 186   2                      /*µ±Ç°Ê±¼ä×ª·ÖÎªµ¥Î»£¬Ò×ÓÚÇø¼ä±È¶Ô*/
 187   2                      tt_minuteStamp = valTime_Local.time_Hour * 60 + valTime_Local.time_Minute;
 188   2                              
 189   2                      memset(tt_minuteTemp_cmpA, 0, 4 * sizeof(u16));
 190   2                      memset(tt_minuteTemp_cmpB, 0, 4 * sizeof(u16));
 191   2                      for(loop = 0; loop < 4; loop ++){
 192   3                      
 193   3                              if(weekend_judge(valTime_Local.time_Week, timDatsTemp_CalibrateTab[loop].Week_Num)){    /*Ç°ÖÜÕ¼Î»*///ÖÜÕ¼
             -Î»±È¶Ô£¬³É¹¦²Å½øÐÐÏÂÒ»²½
 194   4                                      
 195   4                                      if(timDatsTemp_CalibrateTab[loop].if_Timing){
 196   5                                              
 197   5                                              if(timDatsTemp_KeepTab[loop] == 255){
 198   6                                              
 199   6                                                      tt_minuteTemp_cmpA[loop] = 0;
 200   6                                                      tt_minuteTemp_cmpB[loop] = 1439;
 201   6                                              }else{
 202   6                                              
 203   6                                                      tt_minuteTemp_cmpA[loop] = timDatsTemp_CalibrateTab[loop].Hour * 60 + timDatsTemp_CalibrateTab[loop]
             -.Minute;        //¶¨Ê±_Æðµã
 204   6                                                      tt_minuteTemp_cmpB[loop] = tt_minuteTemp_cmpA[loop] + timDatsTemp_KeepTab[loop];
 205   6                                              }
 206   5                                      }
 207   4                              }
 208   3                      }
 209   2                      
 210   2                      /*logµ÷ÊÔ´òÓ¡*///È¨ÏÞ¶¨Ê±Êý¾Ý´òÓ¡
 211   2                      {
 212   3                              u8 log_dats[80] = {0};
 213   3                              static u8 cnt_disp = 0;
 214   3                              
 215   3                              sprintf(log_dats, "time_A1: %d, time_B1: %d\n time_A2: %d, time_B2: %d\n time_A3: %d, time_B3: %d\n tim
             -e_A4: %d, time_B4: %d\n time_NOW: %d\n=========log_dats<<<\n\n",
 216   3                                                                (int)tt_minuteTemp_cmpA[0], (int)tt_minuteTemp_cmpB[0], 
 217   3                                                                (int)tt_minuteTemp_cmpA[1], (int)tt_minuteTemp_cmpB[1],
 218   3                                                                (int)tt_minuteTemp_cmpA[2], (int)tt_minuteTemp_cmpB[2], 
 219   3                                                                (int)tt_minuteTemp_cmpA[3], (int)tt_minuteTemp_cmpB[3], 
 220   3                                                            (int)tt_minuteStamp);
 221   3                                                                
 222   3                              if(cnt_disp < 10)cnt_disp ++;
 223   3                              else{
 224   4                              
 225   4                                      cnt_disp = 0;
 226   4      //                              LogDats(log_dats, strlen(log_dats));
 227   4                              }
 228   3                      }
 229   2                      
 230   2                      if((tt_minuteStamp >= tt_minuteTemp_cmpA[0] && tt_minuteStamp < tt_minuteTemp_cmpB[0])||
 231   2                         (tt_minuteStamp >= tt_minuteTemp_cmpA[1] && tt_minuteStamp < tt_minuteTemp_cmpB[1])||
 232   2                         (tt_minuteStamp >= tt_minuteTemp_cmpA[2] && tt_minuteStamp < tt_minuteTemp_cmpB[2])||
 233   2                         (tt_minuteStamp >= tt_minuteTemp_cmpA[3] && tt_minuteStamp < tt_minuteTemp_cmpB[3])
C51 COMPILER V9.54   TIMERACT                                                              08/17/2018 17:16:38 PAGE 5   

 234   2                        ){
 235   3                                
 236   3                                      /*È¨ÏÞ¶¯×÷ÏìÓ¦*/
 237   3                                      if(timDatsTemp_CalibrateTab[loop].Status_Act & 0x01){   /*Ö¸ÎÆ´¥Ãþ½ûÓÃÊ¹ÄÜ*/
 238   4                                      
 239   4                                              FP_umDetect_enFLAG = 1;
 240   4                                              
 241   4                                      }else{  /*Ö¸ÎÆ´¥Ãþ½ûÓÃÊ§ÄÜ*/
 242   4                                      
 243   4                                              FP_umDetect_enFLAG = 0;
 244   4                                      }
 245   3                                      
 246   3                        }else{
 247   3                        
 248   3                                      /*È¨ÏÞ¶¯×÷ÏìÓ¦*///·´×ª»Ö¸´
 249   3                                      if(timDatsTemp_CalibrateTab[loop].Status_Act & 0x01){   /*Ö¸ÎÆ´¥Ãþ½ûÓÃÊ§ÄÜ*/
 250   4      
 251   4                                              FP_umDetect_enFLAG = 0;
 252   4                                              
 253   4                                      }else{  /*Ö¸ÎÆ´¥Ãþ½ûÓÃÊ¹ÄÜ*/
 254   4      
 255   4                                              FP_umDetect_enFLAG = 1;
 256   4                                      }
 257   3                        }
 258   2                      
 259   2                      for(loop = 0; loop < 4; loop ++){
 260   3                                      
 261   3                              if(timDatsTemp_CalibrateTab[loop].if_Timing){
 262   4                                      
 263   4                                      if(tt_minuteStamp >= tt_minuteTemp_cmpB[loop]){
 264   5                                      
 265   5                                              if(permissionTim_oneShoot_FLAG & (1 << loop)){  //ÊÇ·ñÎªÒ»´ÎÐÔ¶¨Ê±£¬ÊÇÔòÇå¿Õ±¾¶Î¶¨Ê±ÐÅÏ¢
 266   6                                                      
 267   6                                                      u8 code dats_Temp = 0;
 268   6                                                      
 269   6                                                      permissionTim_oneShoot_FLAG &= ~(1 << loop);
 270   6                                                      coverEEPROM_write_n(EEPROM_ADDR_permissionTimeTab + loop * 3, &dats_Temp, 1); //¶¨Ê±ÐÅÏ¢Çå¿Õ
 271   6                                                      coverEEPROM_write_n(EEPROM_ADDR_permissionKeepTab + loop * 3, &dats_Temp, 1);
 272   6                                              }
 273   5                                      }
 274   4                              }
 275   3                      }
 276   2              }
 277   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1884    ----
   CONSTANT SIZE    =    378    ----
   XDATA SIZE       =      4     140
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
